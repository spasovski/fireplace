// Widths
$desktop = 672px;

// These are potentially temporary while real desktop widths are birthed.
$desktop-content = 612px;
$desktop-hdr = 732px;
$desktop-ftr = $desktop-hdr;

// Use these as @media $at-least-desktop {}
$at-least-desktop = unquote('(min-width: 672px)');

// Colors
// TODO: Have Michael take a peek at these!
$link = #2d87ca;
$link-dark = darken($link, 10%);
$faded-link = rgba($link, .5);
$shadow-blue = #98B2C9;
$border-blue = #C9DDF2;
$border-black = rgba(#000, .2);
$faded-blue = rgba($border-blue, .1);
$orange = darken(#d60, 5%);
$red = #c00000;
$maroon = #800;
$green = #090;
$black = #000;
$dark-gray = #333;
$navy-gray = #394C58;
$overlay-gray = #2a353c;
$text = #424f5a;
$subtext = #74828d;
$darker-text = darken($text, 25%);
$medium-gray = #666;
$gray = #888;
$note-gray = #999;
$bg-gray = #bbb;
$light-gray = #ccc;
$faint-gray = #eee;
$barely-gray = #fcfcfc;
$white = #fff;
$bg = #eff1f3;
$black-border = #14171a;
$bg-lite = lighten($bg, 2%);
$faint-blue = #ECF5FE;
$grain = #394C58;

// Used for content ratings for games in Brazil.
// You can use them elsewhere when you want colourful boxes.
// Don't be a square.
$box-green = #00b963;
$box-blue = #00d5ff;
$box-yellow = #ffd300;
$box-orange = #ff7c00;
$box-red = #ff2600;


$btn-b = #44A5E1;
$btn-b-dark = #267CC2;
$btn-b-lite = saturate(spin($btn-b, 4), 4%);


// Font Stacks
$open-stack = "Open Sans", "OpenSansWeb", "Helvetica Neue", Arial, sans-serif;


// Retina
$retina = unquote('screen and (-webkit-min-device-pixel-ratio: 2), screen and (min--moz-device-pixel-ratio: 2), screen and (min-device-pixel-ratio: 2)');


// Mixins
$grain-src = url(../img/grain.png);
grain() {
    background-image: $grain-src;
}

$arrow-src = url(../img/arrows/plain.png);

light-text-shadow() {
    text-shadow: 0 1px 0 rgba(255,255,255,.5);
}

transform($tform) {
    -webkit-transform: $tform;
    -moz-transform: $tform;
    -ms-transform: $tform;
    transform: $tform;
}

transform-origin($x, $y) {
    -moz-transform-origin: $x $y;
    -webkit-transform-origin: $x $y;
    -ms-transform-origin: $x $y;
    transform-origin: $x $y;
}

transition($property) {
    -webkit-transition: $property;
    transition: $property;
}

transition-property($property) {
    -webkit-transition-property: $property;
    transition-property: $property;
}

transition-duration($duration = 2s) {
    -webkit-transition-duration: $duration;
    transition-duration: $duration;
}

transition-delay($delay = 1s) {
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
}

text-columns($count, $gap = 1em) {
    column-count: $count;
    -moz-column-count: $count;
    -webkit-column-count: $count;
    column-gap: $gap;
    -moz-column-gap: $gap;
    -webkit-column-gap: $gap;
}

ellipsis() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Image replacement.
hidetext() {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
}

animation($animation) {
    -webkit-animation: $animation;
    -moz-animation: $animation;
    animation: $animation;
}

gradientLeft($gradient) {
    background-image: -webkit-linear-gradient(left, $gradient);
    background-image:         linear-gradient(to right, $gradient);
}

gradientTop($gradient) {
    background-image: -webkit-linear-gradient(top, $gradient);
    background-image:         linear-gradient(to bottom, $gradient);
}

gradient-two-color($color1, $color2) {
    background-color: $color2;
    background-image: -webkit-gradient(linear, left bottom, left top, from($color1), to($color2));
    background-image: -webkit-linear-gradient($color1, $color2);
    background-image:         linear-gradient($color1, $color2);
}

gradient-two-color-with-image($color1, $color2, $image=unquote(''), $position=unquote(''), $repeat=unquote('')) {
    background: $color2;
    background: $image $position $repeat, -webkit-gradient(linear, left bottom, left top, from($color1), to($color2));
    background: $image $position $repeat, -webkit-linear-gradient($color1, $color2);
    background: $image $position $repeat, linear-gradient($color1, $color2);
}

// Depressed button/link styles
depressed() {
    box-shadow: inset 0 8px 20px 6px rgba(0,0,0,.1), inset 0 0 1px 1px rgba(0,0,0,.1);
}

appearance-none() {
    // appearance: none; // This isn't even a proposed descriptor.
    -moz-appearance: none;
    -webkit-appearance: none;
}

header-hover() {
    background-image: -webkit-linear-gradient(top, rgba(0,0,0,0), rgba(0,0,0,.25) 25%, rgba(0,0,0,.25) 75%, rgba(0,0,0,0) 100%);
    background-image: linear-gradient(top, rgba(0,0,0,0), rgba(0,0,0,.25) 25%, rgba(0,0,0,.25) 75%, rgba(0,0,0,0) 100%);
}

header-active() {
    background-image: -webkit-linear-gradient(top, rgba(0,0,0,0), rgba(0,0,0,.35) 25%, rgba(0,0,0,.35) 75%, rgba(0,0,0,0) 100%);
    background-image: linear-gradient(top, rgba(0,0,0,0), rgba(0,0,0,.35) 25%, rgba(0,0,0,.35) 75%, rgba(0,0,0,0) 100%);
}

// Because WebKit can't figure out how to animate PNGs.
webkit-spin() {
    -webkit-animation-duration: 1.5s;
    -webkit-animation-name: spin;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;
}

// Spinners!
spinner-base() {
    animation(unquote('0.9s spin infinite steps(30)'));
    height: 30px;
    width: 30px;
    margin: 0 auto;
    spinner-base-image('');
}

spinner-abs() {
    position: absolute;
    margin-left: -15px;
    left: 50%;
}

spinner-alt-image(type) {
    if (type == 'retina') {
        background-image: url(../img/btn_spinner_alt_2x.png);
        background-size: 30px auto;
    } else {
        background-image: url(../img/btn_spinner_alt.png);
    }
}

spinner-base-image(type) {
    if (type == 'retina') {
        background: url(../img/btn_spinner_2x.png) no-repeat center;
        background-size: 30px auto;
    } else {
        background: url(../img/btn_spinner.png) no-repeat center;
    }
}

spinner-install-image(type) {
    if (type == 'retina') {
        background: url(../img/btn_spinner_18_2x.png) no-repeat center;
        background-size: 18px auto;
    } else {
        background: url(../img/btn_spinner_18.png) no-repeat center;
    }
}

spinner(type) {
    spinner-base();
    if (type == 'absolute') {
        spinner-abs();
    } else if (type == 'absolute alt') {
        spinner-abs();
        spinner-alt-image('');
    } else if (type == 'alt') {
        spinner-alt-image('');
    } else if (type == 'install') {
        height: 18px;
        width: 18px;
        margin: 2px 0;
        spinner-install-image('');
    }
}

// Flex Box (trim me!)

display-flex() {
    display: -ms-box;
    display: -moz-box;
    display: -webkit-box;
    display: flex;
    display: -ms-flex;
    display: -moz-flex;
    display: -webkit-flex;
}

flex-stack() {
    flex-direction: column;
    -ms-flex-direction: column;
    -moz-flex-direction: column;
    -webkit-flex-direction: column;
    -ms-box-orient: vertical;
    -moz-box-orient: vertical;
    -webkit-box-orient: vertical;
}

flex-line() {
    flex-direction: row;
    -ms-flex-direction: row;
    -moz-flex-direction: row;
    -webkit-flex-direction: row;
    -ms-box-orient: horizontal;
    -moz-box-orient: horizontal;
    -webkit-box-orient: horizontal;
}

flex-center() {
    -ms-box-align: center;
    -moz-box-align: center;
    -webkit-box-align: center;
    align-self: center;
    -ms-align-self: center;
    -moz-align-self: center;
    -webkit-align-self: center;
}

flex($flex) {
    -ms-box-flex: $flex;
    -moz-box-flex: $flex;
    -webkit-box-flex: $flex;
    flex: $flex;
    -ms-flex: $flex;
    -moz-flex: $flex;
    -webkit-flex: $flex;
}
